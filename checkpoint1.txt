import os.path
import time, zipfile, sys, binascii, math, StringIO
from Fields import Fields
from Method_info import Method_info


def checkfile():
    print 'importing file:', sys.argv[1]
    strsplit = sys.argv[1].split('.')
    if not strsplit[1] == "class":
        print "not a class file"

def getmagic(f):
    return "".join("{:02x}".format(ord(c)) for c in f.read(4))

def getminor(f):
    return "".join("{:02x}".format(ord(c)) for c in f.read(2))

def getmajor(f):
    return "".join("{:02x}".format(ord(c)) for c in f.read(2))

def getPoolSize(f):
    return "".join("{:02x}".format(ord(c)) for c in f.read(2))

# def getPool(f):
#    global _poolSize
#    return "".join("{:02x}".format(ord(c)) for c in f.read(_poolSize))

def getHex(binary_str):
    return "".join("{:02x}".format(ord(c)) for c in binary_str)

def str_to_int(s):
    i = int(s, 16)
    if i >= 2 ** 23:
        i -= 2 ** 24
    return i

def binStr_to_int(str):
    i = 0
    _str = list(str)[::-1]
    for x in range(0, len(_str)):
        i += math.pow(2, x) * int(_str[x])
    return i

def getPool(f):
    poolSize = getPoolSize(f)
    _poolSize = str_to_int(poolSize)
    print '#Elements in pool:', _poolSize - 1
    print 'Constant Pool Table'
    external_list = []
    for i in range(1, _poolSize):
        print 'Constant pool element #', i
        Current_pool_element = f.read(1)
        _Current_pool_element = ''.join(format(ord(x), 'b') for x in Current_pool_element)
        ___Current_pool_element = binStr_to_int(_Current_pool_element)
        # binascii.a2b_uu(Current_pool_element)
        # print
        internal_list = []
        if (___Current_pool_element == 9):
            print 'CONSTANT_Fieldref:',
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
        elif (___Current_pool_element == 10):
            print 'CONSTANT_Methodref'
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
        elif (___Current_pool_element == 11):
            print 'CONSTANT_InterfaceMethodref'
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
        elif (___Current_pool_element == 7):
            print 'CONSTANT_Class_info'
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
        elif (___Current_pool_element == 8):
            print 'CONSTANT_String'
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
        elif (___Current_pool_element == 3):
            print 'CONSTANT_Integer'
            print "".join("{:02x}".format(ord(c)) for c in f.read(4))
        elif (___Current_pool_element == 4):
            print 'CONSTANT_Float'
            print "".join("{:02x}".format(ord(c)) for c in f.read(4))
        elif (___Current_pool_element == 5):
            print 'CONSTANT_Long'
            print "".join("{:02x}".format(ord(c)) for c in f.read(4))
            print "".join("{:02x}".format(ord(c)) for c in f.read(4))
        elif (___Current_pool_element == 6):
            print 'CONSTANT_Double'
            print "".join("{:02x}".format(ord(c)) for c in f.read(4))
            print "".join("{:02x}".format(ord(c)) for c in f.read(4))
        elif (___Current_pool_element == 12):
            print 'CONSTANT_NameAndType'
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
        elif (___Current_pool_element == 1):
            print 'CONSTANT_Utf8'
            Utf8_len = str_to_int("".join("{:02x}".format(ord(c)) for c in f.read(2)))
            print 'length of array', Utf8_len
            print "".join("{:02x}".format(ord(c)) for c in f.read(Utf8_len))
        elif (___Current_pool_element == 15):
            print 'CONSTANT_MethodHandle'
            print "".join("{:02x}".format(ord(c)) for c in f.read(1))
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
        elif (___Current_pool_element == 16):
            print 'CONSTANT_MethodType'
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
        elif (___Current_pool_element == '18'):
            print 'CONSTANT_InvokeDynamic'
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
            print "".join("{:02x}".format(ord(c)) for c in f.read(2))
        else:
            print 'invalid constant pool parse'

if __name__ == "__main__":
    filename = sys.argv[1]
    f = open(filename, 'rb')
    magic = getmagic(f)
    if magic != 'cafebabe':
        print 'class file format not supported'
        exit()
    minor = getminor(f)
    major = getmajor(f)
    print 'magic:', magic
    print 'version', 'minor:', minor,
    print 'major:', major #binascii.unhexlify(major)
    getPool(f)
    access_flags = "".join("{:02x}".format(ord(c)) for c in f.read(2))
    print 'flags', access_flags
    this_class = "".join("{:02x}".format(ord(c)) for c in f.read(2))
    print 'this class', this_class
    super_class = "".join("{:02x}".format(ord(c)) for c in f.read(2))
    print 'super class', super_class
    interfaces_count = "".join("{:02x}".format(ord(c)) for c in f.read(2))
    print 'interfaces_count', interfaces_count
    _interfaces_count = str_to_int(interfaces_count)
    interfaces = "".join("{:02x}".format(ord(c)) for c in f.read((2 * _interfaces_count)))
    print 'interfaces', interfaces
    fields_count = "".join("{:02x}".format(ord(c)) for c in f.read(2))
    _fields_count = str_to_int(fields_count)
    print '#of fields', _fields_count
    for i in range(1, _fields_count + 1):
        fields = Fields()
        fields.getField(f, i)
    method_count = "".join("{:02x}".format(ord(c)) for c in f.read(2))
    _method_count = str_to_int(method_count)
    # foo_ = foo()
    # foo_()
    method_info = Method_info()
    method_list = []
    print '#of methods', _method_count
    for x in range(1, _method_count + 1):
        method_list.append(method_info.getmethodinfo(f, x))
    print 'Printing LIST'
    print method_list
    exit()
